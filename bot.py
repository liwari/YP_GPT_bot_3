import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
from config import BOT_TOKEN, BOT_ADMIN_ID, GPT_MAX_TOKENS, MAX_SESSIONS, MAX_USERS, MAX_TOKENS_IN_SESSION
from gpt import get_answer_from_gpt
from log import get_log_file
from data_base import insert_user_to_user_data_table, get_user_data, add_message_data, get_messages_data
from bot_info import bot_info, system_end_prompt
from helpers import convert_messages_data, get_story, get_messages_data_by_user_id

# @GPT_StoryMaker_Bot
bot = telebot.TeleBot(token=BOT_TOKEN)

bot.send_message(BOT_ADMIN_ID, f"üëã –ª–µ—Ç—Å –≥–æ—É")


def make_keyboard(items):
    markup = ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    for item in items:
        markup.add(KeyboardButton(item))

    return markup


@bot.message_handler(commands=['start', 'new_story'])
def start_command(message: Message):
    chat_id = message.chat.id
    user_name = message.chat.first_name
    insert_user_to_user_data_table(chat_id, user_name)
    if message.text == '/start':
        bot.send_message(chat_id, f"ü§ñ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, {user_name}!")

    user_data = get_user_data(chat_id)
    session_id = user_data['session_id']
    user_number = user_data['id']

    if user_number > MAX_USERS:
        bot.send_message(chat_id, f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ((\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º–æ–µ "
                                  f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. ({user_number}/{MAX_USERS})")
        return
    if session_id > MAX_SESSIONS:
        bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Å–µ—Å—Å–∏–∏ "
                                  f"({session_id} –∏–∑ {MAX_SESSIONS})"
                                  f"\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø - @liwari_kaulitz")
        return
    messages_data = get_messages_data(chat_id, session_id)
    session_total_tokens = 0
    if messages_data and messages_data[-1]['total_tokens']:
        session_total_tokens = messages_data[-1]['total_tokens']
        if session_total_tokens >= MAX_TOKENS_IN_SESSION:
            bot.send_message(chat_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã"
                                      f"({session_total_tokens} –∏–∑ {MAX_TOKENS_IN_SESSION})"
                                      f"\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø - @liwari_kaulitz")
            return
    bot.send_message(chat_id, f"–í—ã –Ω–∞—á–∞–ª–∏ {session_id} –∏–∑ {MAX_SESSIONS} —Å–µ—Å—Å–∏–π.\n–ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É: "
                              f"{MAX_TOKENS_IN_SESSION - session_total_tokens} –∏–∑ {MAX_TOKENS_IN_SESSION} —Ç–æ–∫–µ–Ω–æ–≤.")
    next_question_handler(chat_id, 0)


def make_command_button(message):
    chat_id = message.chat.id
    button_answers = ['/whole_story', '/new_story']
    if chat_id == BOT_ADMIN_ID:
        button_answers.append('/debug')
    markup = make_keyboard(button_answers)
    bot.send_message(chat_id, '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –ø–∏—Å–∞–ª –µ—ë —Å–æ –º–Ω–æ–π!', reply_markup=markup)


def check_is_command(message: Message):
    if message.text and message.text[0] == '/':
        return True
    return False


@bot.message_handler(commands=['help'])
def help_command(message):
    chat_id = message.chat.id
    bot.send_message(chat_id,
                     text="ü§ñ –ü—Ä–∏–≤–µ—Ç!\n–Ø GPT-–±–æ—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.\n–û—Ç —Ç–µ–±—è –º–Ω–µ "
                          "–Ω—É–∂–µ–Ω –≤—ã–±–æ—Ä –∂–∞–Ω—Ä–∞, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –º–µ—Å—Ç–∞ —Å–æ–±—ã—Ç–∏–π. –ú–æ—è –∑–∞–¥–∞—á–∞: –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞ "
                          "–ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –∏—Å—Ç–æ—Ä–∏—é ‚ò∫Ô∏è\n–ù–∞—á–∞—Ç—å - /start")


@bot.message_handler(commands=['debug'])
def send_logs(message):
    chat_id = message.chat.id
    if chat_id == BOT_ADMIN_ID:
        with get_log_file() as log_file:
            bot.send_document(chat_id, log_file)
    else:
        bot.send_message(chat_id, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã')


@bot.message_handler(commands=['continue'])
def continue_action(message):
    chat_id = message.chat.id
    messages_data = get_messages_data_by_user_id(chat_id)
    messages_data_length = len(messages_data)
    questions_data_length = len(bot_info['questions_data'])

    if messages_data_length < questions_data_length:
        next_question_index = len(messages_data)
        next_question_handler(chat_id, next_question_index)
        return

    session_total_tokens = 0
    if messages_data and messages_data[-1]['total_tokens']:
        session_total_tokens = messages_data[-1]['total_tokens']
    if session_total_tokens >= MAX_TOKENS_IN_SESSION:
        bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã—Ö –∑–∞ —Å–µ—Å—Å–∏—é, –ø—Ä–µ–≤—ã—Å–∏–ª–æ –ª–∏–º–∏—Ç. "
                                  f"({session_total_tokens} –∏–∑ {MAX_TOKENS_IN_SESSION})"
                                  f"\n–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é - /start")
        return

    converted_messages = convert_messages_data(messages_data)
    messages = converted_messages['messages']
    all_text = converted_messages['all_text']

    waiting_message = bot.send_message(chat_id, '–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω GPT.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...')

    gpt_response = get_answer_from_gpt(messages, all_text)
    answer = gpt_response['answer']
    tokens_number = gpt_response['tokens_number']
    add_message_data(chat_id, 'assistant', answer, tokens_number)

    bot.delete_message(waiting_message.chat.id, waiting_message.message_id)

    bot.send_message(chat_id, answer)
    if message.text == '/end':
        make_command_button(message)
        return
    bot.send_message(chat_id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–∏—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–∂–º–∏ /continue\n–î–ª—è '
                              '–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–∂–º–∏ /end')


@bot.message_handler(commands=['end'])
def end_command(message):
    chat_id = message.chat.id
    messages_data = get_messages_data_by_user_id(chat_id)
    messages_data_length = len(messages_data)
    questions_data_length = len(bot_info['questions_data'])

    if messages_data_length < questions_data_length:
        next_question_index = len(messages_data)
        next_question_handler(chat_id, next_question_index)
        return

    add_message_data(chat_id, 'system', system_end_prompt, len(system_end_prompt))
    continue_action(message)


@bot.message_handler(commands=['whole_story'])
def whole_story(message: Message):
    chat_id = message.chat.id
    messages_data = get_messages_data_by_user_id(chat_id)
    story_text = get_story(messages_data)
    if not story_text:
        bot.send_message(chat_id, '–í —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ —É –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.')
        return
    bot.send_message(chat_id, story_text)


def next_question_handler(user_id, question_index):
    chat_id = user_id

    button_answers = []
    next_question_data = bot_info['questions_data'][question_index]
    answers_data = next_question_data['answers_data']
    for answer_data in answers_data:
        button_answers.append(answer_data['button_answer'])
    markup = make_keyboard(button_answers)
    bot.send_message(chat_id, next_question_data['question'], reply_markup=markup)


@bot.message_handler(content_types=['text'])
def text_handler(message: Message):
    if check_is_command(message):
        return
    chat_id = message.chat.id
    user_message = message.text
    prev_messages_data = get_messages_data_by_user_id(chat_id)
    current_question_index = len(prev_messages_data)
    prev_messages_data_length = current_question_index + 1
    questions_data_length = len(bot_info['questions_data'])
    role = 'user'
    prompt = ''
    if prev_messages_data_length <= questions_data_length:
        role = 'system'
        current_question_data = bot_info['questions_data'][current_question_index]
        current_answers_data = current_question_data['answers_data']
        if not len(current_answers_data):
            prompt = user_message
        for answer_data in current_answers_data:
            if user_message == answer_data['button_answer']:
                prompt = answer_data['prompt']
    if not prompt:
        next_question_handler(chat_id, current_question_index)
        return

    add_message_data(chat_id, role, prompt, len(prompt))
    continue_action(message)


bot.polling()
